{"data":[{"id":"6226c4ef536383d488af0ed1","created":"2022-03-08T02:52:31.420Z","comments_index":5,"allow_comment":true,"title":"Remix 首屏数据注入的 HACK 方式","text":"对于一个 SSR 应用，在服务端渲染的时候都会去请求数据然后才能在服务端就渲染出含数据的结构，并且会把数据脱水到 html 上。一般来说，每一个路由都可以去注入一些数据，以便服务端渲染。在 Remix 中，它提供了 loader 和 useLoaderData 去做这件事情。\n\n例如：在 `/posts` 中，使用如下代码。\n\n```tsx\n// routes/posts.tsx\nimport { LoaderFunction, useLoaderData } from 'remix'\n\nexport const loader: LoaderFunction = async () => {\n  return [{ title: 'Hello World', body: 'Hello World' }]\n}\nexport default function Posts() {\n  const data = useLoaderData<{ title: string; body: string }[]>()\n  console.log(data)\n\n  return data.map(({ title, body }) => (\n    <div key={title}>\n      <h1>{title}</h1>\n      <p>{body}</p>\n    </div>\n  ))\n}\n\n```\n\nLoaderData 中的数据在服务端渲染就被生成，DOM 结构在服务端就被确定。\n\n![](https://s2.loli.net/2022/03/08/QEjtxIoKiawBuey.png)\n\n但是这只是单个路由的，如何让每个路由都能获取到一份全局共享的数据呢，也就是说入口数据，首屏加载时都会被用到的数据。你总不能每个路由都去写一遍吧。\n\n首先想到的是 Remix 有个 Root.tsx 文件，这个一个入口文件。我尝试在这里和上面一样增加一个 Loader，然后通过 ReactContext 方式去共享。\n\n```tsx\n// test.context.tsx\nimport { AggregateRoot } from '@mx-space/api-client'\nimport { createContext, useContext } from 'react'\n\nexport const RootDataContext = createContext<{ data: AggregateRoot | null }>({\n  data: null,\n})\nexport const useRootDataContext = () => useContext(RootDataContext)\n\n\n// Root.tsx\nimport {\n  Links,\n  LiveReload,\n  LoaderFunction,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLoaderData,\n} from 'remix'\nimport type { MetaFunction } from 'remix'\nimport { RootDataContext } from './test.context'\n\nexport const meta: MetaFunction = () => {\n  return { title: 'New Remix App' }\n}\nexport const loader: LoaderFunction = async () => {\n  return {\n    title: 'Root title',\n    message: 'this is root data injection',\n    nest: {\n      message: 'this is nest object in root',\n    },\n  }\n}\nexport default function App() {\n  const data = useLoaderData()\n  return (\n    <RootDataContext.Provider value={{ data }}>\n      <html lang=\"en\">\n        <head>\n          <meta charSet=\"utf-8\" />\n          <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n          <Meta />\n          <Links />\n        </head>\n        <body>\n          <Outlet />\n          <ScrollRestoration />\n          <Scripts />\n          <LiveReload />\n        </body>\n      </html>\n    </RootDataContext.Provider>\n  )\n}\n\n```\n<!-- more -->\n这样的话，在子路由中的确可以拿到数据，通过 useContext，但是在服务端就拿不到，如果去访问 nest object 的话就直接报错了。因为整个 context 的值是 undefined。\n\n后来想到，可以学习框架 SSR 数据注入的方式去 HACK。一样是通过 Context 实现。这次 Root.tsx 不需要修改，只要修改 entry.client.tsx 和 entry.server.tsx 就行了。在 entry.server.tsx 我们需要去获取数据，这是在服务端就进行的。然后把数据挂载到 Context 上，这部分 Context 是为服务端渲染准备的，并不能作用到浏览器端。所以我们还需要把数据序列化挂载到 DOM 上，代码如下。\n\n```tsx\nimport { renderToString } from 'react-dom/server'\nimport type { EntryContext } from 'remix'\nimport { RemixServer } from 'remix'\nimport { RootContext } from './context'\nimport { client } from './utils/client'\n\nexport default async function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  const aggregate = await client.aggregate.getAggregateData() // fetch data\n  const markup = renderToString(\n    <>\n      {/* mount data */}\n      <RootContext.Provider value={{ data: aggregate }}> \n\t  {/* serialize data into dom */}\n        <script\n          id=\"initial-data\"\n          dangerouslySetInnerHTML={{ __html: `${JSON.stringify(aggregate)}` }}\n          type=\"application/json\"\n        ></script>\n        <RemixServer context={remixContext} url={request.url} />,\n      </RootContext.Provider>\n    </>,\n  )\n\n  responseHeaders.set('Content-Type', 'text/html')\n\n  return new Response('<!DOCTYPE html>' + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  })\n}\n\n```\n\n在 entry.client.tsx 只需要用同一个 Context 再次注入数据即可。注意需要把 Context 单独抽离一个文件，不能单独写在 entry.\\[client|server\\].tsx 下。\n\n```tsx\n// entry.client.tsx\nimport { hydrate } from 'react-dom'\nimport { RemixBrowser } from 'remix'\nimport { RootContext } from './context'\n\nhydrate(\n  <RootContext.Provider\n    value={{\n      data: JSON.parse(document.getElementById('initial-data')!.innerHTML),\n    }}\n  >\n    <RemixBrowser />\n  </RootContext.Provider>,\n  document,\n)\n\n```\n\n这里主要是去找到之前注入的 JSON 数据再次 parse 之后，直接附加到 Context ，浏览器这边就也能获取到初始数据了。\n\n然后各路由使用 useRootData 就能使用这个数据了。\n\n```tsx\n// routes/data.tsx\nimport { useRootContext } from '~/context'\n\nexport default function Index() {\n  const { data } = useRootContext()\n  return <pre>{JSON.stringify(data)}</pre>\n}\n\n```\n\n![!SSR 工作良好](https://s2.loli.net/2022/03/08/pk2tMTVZyAlN9uQ.png)\n\n![!浏览器渲染也正常](https://s2.loli.net/2022/03/08/BnFtlfbUz12ms8u.png)\n\nDemo: [remix-root-data-context-injection](https://github.com/Innei/remix-root-data-context-injection)","images":[{"width":3098,"height":1218,"accent":"#ffffff","type":"png","src":"https://s2.loli.net/2022/03/08/QEjtxIoKiawBuey.png"},{"width":3018,"height":1514,"accent":"#fefefe","type":"png","src":"https://s2.loli.net/2022/03/08/pk2tMTVZyAlN9uQ.png"},{"width":3030,"height":354,"accent":"#ffffff","type":"png","src":"https://s2.loli.net/2022/03/08/BnFtlfbUz12ms8u.png"}],"modified":"2022-04-16T06:05:26.565Z","slug":"remix-get-initial-data-for-root","summary":null,"category_id":"5eb2c62a613a5ab0642f1f7a","copyright":true,"tags":["remix","ssr"],"count":{"read":440,"like":1},"meta":null,"category":{"id":"5eb2c62a613a5ab0642f1f7a","type":0,"count":56,"name":"编程","slug":"programming","created":"2020-05-06T14:14:02.339Z"}},{"id":"61e18bcd75199f8a45f00b45","created":"2022-01-14T14:42:21.063Z","comments_index":2,"allow_comment":true,"title":"在 NextJS 预获取数据时正确处理异常请求","text":"在用 NextJS 构建 SSR 应用的时候总是要在页面的 `getInitialProps` 方法中预先获取数据，然后由框架注水，以便在 hydate 时候不用再由浏览器端去加载重复数据。但是在这一个步骤中请求可能会发生错误。如果请求的接口应该是由服务端给出的 404，但是在这个步骤中请求抛出错误之后，NextJS 会直接捕获并给错误页，状态却是 500，这明显不是我们预期的结果，期望得到的是请求状态 404。由于 NextJS 不知道如何处理异常，所以默认状态码是 500，那么如何解决，转发出原请求的状态码呢。\n\n首先模拟一个 404 请求。以下由 express 为例。\n\n```js\nconst router = express.Router()\n\nrouter.get('/data', (req, res) => {\n  res.status(200).send({ data: 'Hello World!' })\n})\n\nrouter.get('/404', (req, res) => {\n  res.status(404).send({ message: '页面走丢了' })\n})\n\nrouter.get('/403', (req, res) => {\n  res.status(403).send({ message: '这..不能看!' })\n})\n\nserver.use('/mock', router)\n```\n\n在 `/mock` 路由下挂载 3 个路由，分别是 mock 404，403，200 的路由。新建一个 NextPage，去获取 404 的数据。如下：\n\n```jsx\n// pages/get-404.js\nimport { $axios } from '../utils/axios'\n\nconst _404 = (props) => {\n  return <pre>{props.data}</pre>\n}\n\n_404.getInitialProps = async () => {\n  const { data } = await $axios.get('/mock/404')\n  return data\n}\n\nexport default _404\n\n```\n\n在开发模式下，NextJS 会直接把异常抛出而不会进入 Error 页，所以需要先 build 然后在生产环境下启动 NextJS。在生产环境下访问这个路由会出现如下页面。\n\n![](https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0114220439.png)\n\n![](https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0114220504.png)\n\nError 页显示 500，请求 `/get-404` 也是 500，而我们想要的是 404。\n\n根据文档所说，我们可以新建 `_Error.js` 去处理异常，官网给的案例如下：\n\n```jsx\n// pages/_error.js\nimport ErrorPage from 'next/error'\n\nErrorPage.getInitialProps = async ({ res, err }) => {\n  const statusCode = res ? res.statusCode : err ? err.statusCode : 404\n  return { statusCode }\n}\n\nexport default ErrorPage\n\n```\n\n这样并不能很好的解决问题。接下来我们来修改一下 axios 的异常拦截器。\n\n```js\nconst axios = require('axios')\n\nconst $axios = axios.default.create({\n  baseURL: 'http://127.0.0.1:3000',\n})\n\n$axios.interceptors.response.use(undefined, (err) => {\n  const response = err.response\n  const status = response ? response.status : 408\n  return Promise.reject(new RequestError(status, response))\n})\n\nexport { $axios }\n\nclass RequestError extends Error {\n  constructor(status, response) {\n    const message = response\n      ? response.data?.message || 'Unknown Error'\n      : 'Request timeout'\n    super(message)\n    this.status = status\n    this.response = response\n  }\n}\n\n```\n\n在拦截器中把异常进行处理，并由自定义异常类再次抛出。在这个类中，我们可以预先获取到 HTTP 异常码，注意：如果是网络中断问题，`status` 为 `ECONNREFUSED`，需要在额外判断。\n\n然后在 `_error.js` 中处理。由于默认的 ErrorPage 不支持自定义所以稍作修改 UI。展示后端异常中的 `message`。\n\n```jsx\n// @ts-check\n\nimport { RequestError } from '../utils/axios'\nimport styles from './error.module.css'\nconst MyErrorPage = ({ message, statusCode }) => {\n  return (\n    <div className={styles['error']}>\n      <div>\n        <h1>{statusCode}</h1>\n        <div className={styles['desc']}>{message}</div>\n      </div>\n    </div>\n  )\n}\nMyErrorPage.getInitialProps = async ({ res, err }) => {\n  if (err instanceof RequestError) {\n    const { status, message } = err\n\n    res && (res.statusCode = typeof status === 'number' ? status : 408)\n    return {\n      statusCode: status,\n      message,\n    }\n  }\n\n  return { statusCode: res.statusCode, message: '' }\n}\n\nexport default MyErrorPage\n\n```\n\n在 ErrorPage 的 `getInitialProps` 中处理异常，如果是预先定义的 `RequestError` 的话，就是请求异常了，直接获取到异常中的 message，statuscode 字段直接返回就好了。同时可以修改 `res.statusCode` 覆盖原有的 500 状态码，从而达到转发请求异常状态码。重新 build 后，如下图。\n\n![](https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0114223436.png)\n\n![](https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0114223446.png)\n\n已实现预期，同时获取页面时状态码也是 404。好耶。403 也是可以的。\n\n![](https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0114223719.png)\n\n完整 Demo：<https://github.com/Innei/nextjs-request-error-demo>","modified":"2022-01-14T14:43:44.557Z","slug":"how-to-handle-nextjs-getInitialProps-error","summary":"Emmm.. 这个问题困恼我两年之久，终于得以解开。","category_id":"5eb2c62a613a5ab0642f1f7a","hide":false,"copyright":true,"tags":["nextjs"],"count":{"read":530,"like":5},"images":[{"width":3052,"height":1910,"accent":"#5f83ad","type":"png","src":"https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0114220439.png"},{"width":2402,"height":1504,"accent":"#615199","type":"png","src":"https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0114220504.png"},{"width":3052,"height":1910,"accent":"#6284ac","type":"png","src":"https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0114223436.png"},{"width":2402,"height":1504,"accent":"#b45d71","type":"png","src":"https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0114223446.png"},{"width":3434,"height":2376,"accent":"#74829b","type":"png","src":"https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0114223719.png"}],"meta":null,"category":{"id":"5eb2c62a613a5ab0642f1f7a","type":0,"count":56,"name":"编程","slug":"programming","created":"2020-05-06T14:14:02.339Z"}},{"id":"61dbb9bdc8ca1a396c5f550f","modified":"2022-01-10T04:44:55.815Z","comments_index":5,"allow_comment":true,"hide":false,"copyright":true,"tags":[],"count":{"read":876,"like":4},"category_id":"5eb2c62a613a5ab0642f1f7e","slug":"2022-frontend-is-so-juan","text":"前端这条路真是一年比一年卷了，每天都在更新很多东西，在 2022 年入门前端需要学点什么，以下是我的理解。\n\n## 预备知识\n\n**提问的艺术**：\n\n1. 表达问题的能力，解决问题的能力，多想多实践的能力。\n1. 善用 GitHub Issue、Google Search、Stack Overflow 检索的能力。\n\n**HTML**：\n\n1. 了解语义化标签，不过在实际开发中这种东西用的真的多吗，大部分都是 div 一把梭，当然真正做人性化的网站会正确使用语义化标签，不管是后期维护还是对盲人朋友都有很大的帮助。\n1. Meta 标签，常见的有 viewport、keyword 等。\n1. Link、Script 标签的使用，rel、async、defer 等属性的用法。\n1. 了解 a11y 是什么。\n\n**CSS**：\n\n1. 会使用常见属性，如 background、overflow、position 等等。\n1. 了解 CSS 盒模型，以及定位。\n1. BFC 是什么，用在什么地方。\n1. CSS3 动画。\n1. 各类选择器，伪类（如 :hover, :focus, ::before），以及权重\n1. CSS 变量\n\n个人建议 CSS 不需要刻意去学，CSS 有大部分东西在实际开发中并不会用到，而且 CSS 更新之快，为了保证兼容性和学习成本，大部分新的提案和特征不会立刻被大众接受。而且刻意去记而不去实践很容易忘。\n\n**JavaScript**\n\n1. 掌握 ES6，如今已没有必要从 ES5 开始。\n1. 了解 JS 是一个单线程的语言，动态弱类型语言。\n1. 网络请求，了解 XMLHTTPRequest，会使用 Fetch API\n1. DOM、BOM 常用 API，以及会用这种方法来操作 DOM。\n1. 事件处理，冒泡、捕获\n1. 异步编程，以及如何将回调地域代码转换为 Promise 写法。\n\n以上内容的掌握，并且能借助一些 UI 库实现一个包含网络请求的登陆页面，算是前端入门了。\n\n## 基础知识\n\n接下来就要打打基础。开始跨进现代前端的第一步。\n\n**JavaScript**\n\n1. 原型链、继承是怎么一回事。\n1. 一些常见的设计模式（工厂模式，观察者模式、订阅发布模式等）。\n1. 闭包是什么，使用闭包如何防止内存泄漏。\n1. 作用域是什么。\n1. this 的指向、隐式和显式绑定 this。\n1. 类型间的隐式转换 （toString(), valueOf, [Symbol.toPrimitive]）。\n1. 了解 Proxy、Reflect 元编程。\n\n**Linux 基础**\n\n1. 常用命令（cd, cp, mv, ls, rm, mkdir 等）。\n1. 会使用 Git 常用命令。\n1. 环境变量\n\n## 基础工程化\n\n可以先选一个前端框架进行学习。以 React、Vue 2 为例。如果是急着找工作可以学 React，学习曲线上 React 大于 Vue 2，但是 Vue 2 目测会被 Vue 3 慢慢取代，而 Vue 3 的 composition api 在一定程度上与 React Hooks 相似，学习曲线上与 React 几乎一致。学习 React 等于又学习了一个 Vue 3 也是个不错的选择。\n\n**React**：\n\n1. 了解 JSX 是什么，怎么去使用，JSX 最终编译的产物是什么。\n1. 了解 Class Component 的用法，以及生命周期。\n1. 了解高阶组件（HOC）。\n1. 掌握 React Hooks 使用，函数式组件的开发。\n1. 调试的能力，能规避一些不必要的重渲染。\n1. 会使用至少一种状态管理库（Redux、Mobx 等）。\n1. 至少通读一遍官方文档。\n\n**Vue 2**：\n\n1. 通读官方文档即可开始。\n1. 建议跟着 [全栈之巅](https://space.bilibili.com/341919508/video) 学习\n\nVue 2 在门槛上明显低于其他框架，这也使得 Vue 2 在短时间内吸引了大量学习者，但是在使用过程中，坑明显比 React 要多得多。再加上 Vue 2 不太聪明的报错方式，让调试更加繁琐。这些在实际开发中对比可以深刻体会到。\n\n**常用类库**：\n\n1. UI 库：Antd，naive-ui 等\n1. 网络请求库：axios，umi-request、ky 等\n1. 状态管理库：vuex、pinia、redux、mobx 等\n\n**CSS**：\n\n1. 了解 CSS 预处理器是什么，解决了什么问题（Less、SCSS、Stylus 等）\n1. CSS Module 是什么，解决了什么问题。\n1. CSS in JS 是什么。\n\n**工具链**：\n\n1. 会使用 Git 管理代码\n1. npm, yarn, pnpm\n1. 了解打包工具，至少知道是干什么的：Webpack、Rollup、Vite、etc.\n\n**架构**：\n\n1. 项目目录分配\n1. 路由处理\n1. 数据管理，持久化数据存储的处理\n1. MVVM\n\n**NodeJS**:\n\n1. 会使用 Express、Koa 或其他服务器框架建立简单的服务器。\n1. 数据库的使用: CRUD，借助 ORM、ODM 库（MongoDB: mongoose, typegoose. MySql: typeorm. etc.）\n1. RESTFul 接口标准。\n\n到这里为止，可以去找个厂上班了。刷刷面试题，问题应该不大。当然有几个拿得出手的项目还是不可少的。\n\n## 再深入工程化\n\n**工具链**：\n\n1. 会使用至少一种打包工具，配置的能力、发包的能力，package.json 的定义。(main, type, files, module, etc.)\n1. 配置 ESLint、Prettier、StyleLint，统一代码风格。\n1. 部署 CI/CD，自动化流程。\n1. husky、lint-staged\n1. Babel 是什么、SWC 了解、ESBuild 了解。\n\n**React**:\n\n1. 理解 React 的 Diff 方式，为什么会重渲染，如何避免或减少重渲染。性能优化。\n1. 拆分组件。抽离 Hooks。\n\n**Vue 3**：\n\n1. 通读 Vue 3 文档。\n1. Composition API、Proxy。\n1. 多实践多踩踩坑。\n\n**TypeScript**:\n\n必学。不要求非常会做体操，简单的类型要会写。然后项目开始用 TypeScript 重构。\n\n**架构**：\n\n1. monorepo\n1. 微前端\n1. 独立组件库\n1. SSR/SPA/CSR/SSG，同构实践\n\n**CSS**:\n\n1. 会使用一种原子 CSS 框架（TailwindCSS, WindiCSS, etc.）\n1. 了解 PostCSS\n\n## 方向\n\n**大前端**:\n\n1. 移动端开发：React Native、Ionic 等\n1. 小程序开发：微信小程序、uni-app、remax 等\n1. 桌面端开发：Electron、NodeGUI 等\n1. H5 开发\n1. 游戏开发：Canvas、WebAssembly 等\n\n**架构**：\n\n1. AST\n1. 设计模式\n1. 算法与数据结构\n1. Rust、Go\n\n**平台**：\n\n主要有前端监控、埋点等其他服务于开发的平台。\n\n唉，以上只是不全面总结，前端真的太卷了。","title":"2022 年学习前端需要学点什么","summary":"前端真是太卷了，卷卷卷卷卷卷卷","created":"2022-01-10T04:44:45.807Z","images":[],"meta":null,"category":{"id":"5eb2c62a613a5ab0642f1f7e","type":0,"count":11,"name":"技术","slug":"technology","created":"2020-05-06T14:14:02.375Z"}},{"id":"61d2f65ea0b78cb570764e67","modified":"2022-01-08T06:45:09.699Z","comments_index":2,"allow_comment":true,"hide":false,"copyright":true,"tags":[],"count":{"read":415,"like":1},"category_id":"5eb2c62a613a5ab0642f1f7c","slug":"thinking-with-js-event-loop","text":"最近突发奇想想做一个桌面时钟，利用 Übersicht 可以用前端的知识开发一个桌面小部件，如图：\n\n![](https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0103203945.png)\n\nUI 的部分我直接把几万年前做的时钟搬过来了，然后在业务逻辑上又做了一遍整体的梳理。之前的钟表是采用首次执行获取当前时间然后每秒再去计算在上一次摆动的角度上新增的角度，累加之后获得下一秒的摆动角度。主要代码：\n\n```js\n// init\nconst time = new Date()\nconst minute = time.getMinutes()\nconst second = time.getSeconds()\nconst hour = time.getHours()\n\nlet minuteDeg =\n    180 + 6 /* 360 / 60 */ * minute + 0.1 /* 360 / 3600 */ * second\nlet secondDeg = 180 + 6 /* 360 / 60 */ * second\nlet hourDeg =\n    180 +\n    30 /* 360 / 12 */ * hour +\n    0.5 /* 360 / 720 */ * minute +\n    0.00833333 /* 360 / 43200 */ * second\n\n// 每秒动画\nfunction setTime() {\n  // 处理动画\n  // springHand($minute, minuteDeg)\n  // ...\n  // 下一秒的角度\n  secondDeg += 6 // 360 / 60\n  minuteDeg += 0.1 // 360 / 3600\n  hourDeg += 0.00833333 // 360 / 43200\n}\n\nsetInterval(setTime, 1000)\n```\n\n之前在做这个钟的时候的确没有考虑周全，直接用了 setInterval 去不断的执行。而我们知道 JS 是个单线程的语言，同时只能做一件事，所以 1000ms 的延后其实并不是 1000ms，这个 1000ms 是空闲(Idle)之后的 1000ms，假设主进程将 timer 放到宏任务队列后，执行完微任务，可能会进行 UI rendering，然后开始执行计时器也就是宏任务。所以 1000ms 只是我们设定的，实际上还需要加上前面 UI rendering 和其他任务的执行开销操作。远不止 1000ms。上面代码改写成 setTimeout，然后通过 Performance API 测出两次执行之间的时间差。如下：\n\n```js\nsetTime()\nlet t = performance.now()\ntimer.current = setTimeout(function loop() {\n  setTime()\n\n  const now = performance.now()\n  console.log(now - t)\n  timer.current = setTimeout(loop, 1000)\n  t = performance.now()\n}, 1000)\n```\n\n![](https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0103210140.jpg)\n\n每次居然都有 3-4ms 的性能开销，况且在计算成本上我已经很努力的去优化了，甚至我都没有每秒都去获取当前时间。我把 UI render 的部分注释再去测试计算开销，跑一万次取平均值。结果是只有 0.0016699999988079072ms，几乎可以忽略不计。所以问题就是 UI render 上，UI 操作是一个开销非常大的操作。\n\n如果不去修正误差会怎么样，以我的方式，每秒去计算下一秒的摆动幅度，每次误差 3ms，1000 秒之后误差 3 秒，也就是 15 分钟大概会慢 3 秒。如果是每次都去实时获取当前时间呢？看起来UI 上的时间永远都是正确的，但是如果盯着看的话，无知无觉中会少了 3 秒。\n\n那么去调整误差也是比较简单的，可以通过 setTimeout 去修正误差。如：\n\n```js\nlet t = performance.now()\nlet count = 0\ntimer.current = setTimeout(function loop() {\n      setTime()\n      const now = performance.now()\n      const offset = (now - t) / count / 1000\n      timer.current = setTimeout(loop, 1000 - offset)\n      count++\n}, 1000)\n```\n\n通过上面的方式的微调之后，再来看看误差值。\n\n![](https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0105142328.png)\n\n对比上面的 3ms 误差少了平均 2ms，所以在一段时间之后还是要重置一遍，重新获取一下当前时间。\n\n如果主线程只做一件事情就是计时，那 1000ms 到底准不准呢。\n\n```js\nt = performance.now()\nsetInterval(() => {\n  let now = performance.now()\n  console.log(now - t)\n  t = now\n}, 1000)\n\n```\n\n![!测试与 Chrome 96](https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0105143429.png)\n\n居然也是不准的，MDN 给出计时器最小误差在 4ms，而且每个浏览器还不一样。所以为什么一般不用了 `setInterval` 而是用 `setTimeout` 去调整误差了。","title":"由一个钟表引发的思考","summary":null,"created":"2022-01-03T13:13:02.167Z","images":[{"height":578,"width":570,"type":"png","accent":"#577a99","src":"https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0103203945.png"},{"height":586,"width":594,"type":"jpg","accent":"#846497","src":"https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0103210140.jpg"},{"height":1202,"width":920,"type":"png","accent":"#ac6466","src":"https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0105142328.png"},{"height":548,"width":590,"type":"png","accent":"#332c6c","src":"https://cdn.jsdelivr.net/gh/Innei/fancy@master/2022/0105143429.png"}],"meta":null,"category":{"id":"5eb2c62a613a5ab0642f1f7c","type":0,"count":26,"name":"学习","slug":"learning-process","created":"2020-05-06T14:14:02.364Z"}},{"id":"61b8aad3ea85337e7a0ff42c","modified":null,"comments_index":1,"allow_comment":true,"hide":false,"copyright":true,"tags":[],"count":{"read":354,"like":2},"category_id":"5eb2c62a613a5ab0642f1f7a","slug":"sdk-unit-test-and-e2e","text":"最近在写适配 Mx Space Server 的 JS SDK。因为想写一个正式一点的库，以后真正能派的上用场的，所以写的时候尽量严谨一点。所以单测和 E2E 也是非常重要。\n\n## 架构设计\n\n先说说我这个接口库是怎么封装了，然后再说怎么去测试。首先我采用的是适配器模式，也就是不依赖任何一个第三方请求库，你可以用 axios、ky、umi-request、fetch 任何一个库，只需要编写一个符合接口标准的适配器。这里以 axios 为例。\n\n配适器接口如下，目前比较简单。\n\n```tsx\nexport interface IRequestAdapter<T = any> {\n  default: T\n  get<P = unknown>(\n    url: string,\n    options?: RequestOptions,\n  ): RequestResponseType<P>\n\n  post<P = unknown>(\n    url: string,\n    options?: RequestOptions,\n  ): RequestResponseType<P>\n\n  patch<P = unknown>(\n    url: string,\n    options?: RequestOptions,\n  ): RequestResponseType<P>\n\n  delete<P = unknown>(\n    url: string,\n    options?: RequestOptions,\n  ): RequestResponseType<P>\n\n  put<P = unknown>(\n    url: string,\n    options?: RequestOptions,\n  ): RequestResponseType<P>\n}\n```\n\n实现 axios-adaptor 如下：\n\n```tsx\nimport axios, { AxiosInstance } from 'axios'\nimport { IRequestAdapter } from '~/interfaces/instance'\nconst $http = axios.create({})\n\n// ignore axios `method` declare not assignable to `Method`\nexport const axiosAdaptor: IRequestAdapter<AxiosInstance> = {\n  get default() {\n    return $http\n  },\n\n  get(url, options) {\n    // @ts-ignore\n    return $http.get(url, options)\n  },\n  post(url, options) {\n    const { data, ...config } = options || {}\n    // @ts-ignore\n    return $http.post(url, data, config)\n  },\n  put(url, options) {\n    const { data, ...config } = options || {}\n    // @ts-ignore\n    return $http.put(url, data, config)\n  },\n  delete(url, options) {\n    const { ...config } = options || {}\n    // @ts-ignore\n    return $http.delete(url, config)\n  },\n  patch(url, options) {\n    const { data, ...config } = options || {}\n    // @ts-ignore\n    return $http.patch(url, data, config)\n  },\n}\n```\n\n然后在构造 client 的时候要注入 adaptor。如下：\n\n```tsx\nconst client = createClient(axiosAdaptor)(endpoint)\nclient.post.post.getList(page, 10, { year }).then((data) => {\n  // do anything\n})\n```\n\n注入 adaptor 后，所有请求方法将使用 adaptor 中的相关方法。\n\n这样做的好处是比较灵活，适用各类库，体积也能做到比较小。类似的 NestJS 等框架也是用了适配器模式，所以 NestJS 可以灵活选择 Express、Koa、Fastify 等。\n\n坏处就是需要编写适配器，对新手来说可能不太友好，但是可以提供默认适配器去缓解这个问题。其次是适配器中方法返回类型是一定的，如错误的使用 axios 的 interceptor 可能会导致出现问题。\n\n## Unit Test\n\n再说说单测，一般接口库也主要做这类测试比较多，因为单测不需要实际去访问接口，都是用 mock 的方式去伪造一个数据，而用 Jest 的话就直接 spyOn 去 mock 掉整个请求方法了。\n\n这里用 axios 为默认适配器，那么就是在测试中 mock 掉 axios 的请求方法（axios.get, axios.post, ...）因为 axios 的逻辑你是不需要关心也不需要测试的。你只需要测试自己的业务逻辑就行了。\n\n而对于这个库而言只需要测试有没有注入 adaptor 后，用 adaptor 请求数据之后有没有拿到了正确的值。如图所示，只需要测试 core 的逻辑，也就是注入 adaptor 之后有没有正确使用 adaptor 去请求，以及用 adaptor 请求拿到数据之后有没有正确处理数据。而关于请求了啥数据，并不关心，所以直接 mock 掉 axios 这层。\n\n```mermaid\nflowchart TD\n    id1([core: client]) --> id2([adaptor: axios]) -- use adaptor to fetch data --> id3([core: handle data]) --> id5([return data])\n```\n\n所以测试可以这样去写：\n\n```tsx\n describe('client `get` method', () => {\n    afterEach(() => {\n      jest.resetAllMocks()\n    })\n    test('case 1', async () => {\n      jest.spyOn(axiosAdaptor, 'get').mockImplementation((url, config) => {\n        if (url === 'http://127.0.0.1:2323/a/a?foo=bar') {\n          return Promise.resolve({ data: { ok: 1 } })\n        }\n\n        return Promise.resolve({ data: null })\n      })\n\n      const client = generateClient()\n      const data = await client.proxy.a.a.get({ params: { foo: 'bar' } })\n\n      expect(data).toStrictEqual({ ok: 1 })\n    })\n\n    test('case 2', async () => {\n      jest.spyOn(axiosAdaptor, 'get').mockImplementation((url, config) => {\n        if (url === 'http://127.0.0.1:2323/a/a') {\n          return Promise.resolve({ data: { ok: 1 } })\n        }\n\n        return Promise.resolve({ data: null })\n      })\n\n      const client = generateClient()\n      const data = await client.proxy.a.a.get()\n\n      expect(data).toStrictEqual({ ok: 1 })\n\n      {\n        jest.spyOn(axiosAdaptor, 'get').mockImplementation((url, config) => {\n          if (url === 'http://127.0.0.1:2323/a/b') {\n            return Promise.resolve({ data: { ok: 1 } })\n          }\n\n          return Promise.resolve({ data: null })\n        })\n\n        const client = generateClient()\n        const data = await client.proxy.a.b.get()\n\n        expect(data).toStrictEqual({ ok: 1 })\n      }\n    })\n  })\n```\n\n如上，直接用 Jest spyOn 掉了 adaptor 的 get 方法，而要测试的则是 core 层有没有正确使用 adaptor 访问了正确的路径。所以在 mockImplementation 中，判断了是不是这个这个 url。\n\n以上则是单测中的一环，client - adaptor - core 的测试。\n\n然后说说单个接口怎么去写单测。我感觉这里其实没有什么必要去写。但是写了还是写一下，我也不知道有什么好的办法。还是使用 mock 的方法 mock 掉 adaptor 的请求返回。简单说说就是这样写了。\n\n比如测试接口 `/comments/:id`:\n\n```ts\ndescribe('test note client', () => {\n  const client = mockRequestInstance(CommentController)\n\n  test('get comment by id', async () => {\n    const mocked = mockResponse('/comments/11111', {\n      ref_type: 'Page',\n      state: 1,\n      children: [],\n      comments_index: 1,\n      id: '6188b80b6290547080c9e1f3',\n      author: 'yss',\n      text: '做的框架模板不错. (•౪• ) ',\n      url: 'https://gitee.com/kmyss/',\n      key: '#26',\n      ref: '5e0318319332d06503619337',\n      created: '2021-11-08T05:39:23.010Z',\n      avatar:\n        'https://sdn.geekzu.org/avatar/8675fa376c044b0d93a23374549c4248?d=retro',\n    })\n\n    const data = await client.comment.getById('11111')\n    expect(data).toEqual(mocked)\n  })\n}\n```\n\n这边主要就是测试这个方法中请求的路径有没有写对了，但是非常关键的是用例中的路径一定要写对，上面那个的话就是 `/comments/11111`，`mockResponse`是我封装的一个测试方法。具体参考：[@mx-space/api-client:\\_\\_test\\_\\_/helper](https://github.com/mx-space/api-client/blob/e9ab246b931832aa8e79a837d9c75c252d1deebf/src/__tests__/helpers/response.ts?_pjax=%23js-repo-pjax-container%2C%20div%5Bitemtype%3D%22http%3A%2F%2Fschema.org%2FSoftwareSourceCode%22%5D%20main%2C%20%5Bdata-pjax-container%5D#L6)\n\n## E2E test\n\nE2E 是点对点测试，是需要去真实访问接口的，这也是最接近用户实际开发体验的测试，也就是说不 mock 掉 adaptor，也不在业务层用假数据的。当然假数据还是要用的，只是需要起一个额外的服务器去挂数据，以便真实去请求数据。\n\nE2E 就是去测试 adaptor 了，因为上面单测除了 adaptor 没测。\n\n我已 Express 、 Jest 为例。我的想法是直接用 Express 托管一系列接口。当然不是手动去启动一个服务，而是 Express 直接跑在 Jest 测试中。\n\n首先写一个方法，起一个 Express 实例。\n\n```ts\n\n// __tests__/helpers/e2e-mock-server.ts\nimport cors from 'cors'\nimport express from 'express'\nimport { AddressInfo } from 'net'\ntype Express = ReturnType<typeof express>\nexport const createMockServer = (options: { port?: number } = {}) => {\n  const { port = 0 } = options\n\n  const app: Express = express()\n  app.use(express.json())\n  app.use(cors())\n  const server = app.listen(port)\n\n  return {\n    app,\n    port: (server.address() as AddressInfo).port,\n    server,\n    close() {\n      server.close()\n    },\n  }\n}\n\n```\n\nport 建议为 `0`，0 表示使用随机一个空闲的端口。因为固定端口在 Jest 并行测试中容易被占用。\n\n测试用例也比较好写，只要按照传统前后端接口请求去写就可以了。如下：\n\n```ts\nimport { allControllers, createClient, HTTPClient, RequestError } from '~/core'\nimport { IRequestAdapter } from '~/interfaces/instance'\nimport { createMockServer } from './e2e-mock-server'\n\nexport const testAdaptor = (adaptor: IRequestAdapter) => {\n  let client: HTTPClient\n  const { app, close, port } = createMockServer()\n\n  afterAll(() => {\n    close()\n  })\n  beforeAll(() => {\n    client = createClient(adaptor)('http://localhost:' + port)\n    client.injectControllers(allControllers)\n  })\n  test('get', async () => {\n    app.get('/posts/1', (req, res) => {\n      res.send({\n        id: '1',\n      })\n    })\n    const res = await client.post.getPost('1')\n\n    expect(res).toStrictEqual({\n      id: '1',\n    })\n  })\n\n  test('post', async () => {\n    app.post('/comments/1', (req, res) => {\n      const { body } = req\n\n      res.send({\n        ...body,\n      })\n    })\n    const dto = {\n      text: 'hello',\n      author: 'test',\n      mail: '1@ee.com',\n    }\n    const res = await client.comment.comment('1', dto)\n\n    expect(res).toStrictEqual(dto)\n  })\n\n  test('get with search query', async () => {\n    app.get('/search/post', (req, res) => {\n      if (req.query.keyword) {\n        return res.send({ result: 1 })\n      }\n      res.send(null)\n    })\n\n    const res = await client.search.search('post', 'keyword')\n    expect(res).toStrictEqual({ result: 1 })\n  })\n\n  test('rawResponse rawRequest should defined', async () => {\n    app.get('/search/post', (req, res) => {\n      if (req.query.keyword) {\n        return res.send({ result: 1 })\n      }\n      res.send(null)\n    })\n\n    const res = await client.search.search('post', 'keyword')\n    expect(res.$raw).toBeDefined()\n    expect(res.$raw.data).toBeDefined()\n  })\n\n  it('should error catch', async () => {\n    app.get('/error', (req, res) => {\n      res.status(500).send({\n        message: 'error message',\n      })\n    })\n    await expect(client.proxy.error.get()).rejects.toThrowError(RequestError)\n  })\n}\n\n// __test__/adaptors/axios.ts\n\nimport { umiAdaptor } from '~/adaptors/umi-request'\nimport { testAdaptor } from '../helpers/adaptor-test'\ndescribe('test umi-request adaptor', () => {\n  testAdaptor(umiAdaptor)\n})\n```\n\n上面封装了一个方法去测试 adaptor，有多次 adaptor 的话比较方便。\n\n测试主要覆盖了，adaptor 接口是否正确，请求构造是否正确，返回数据是否正确。\n\n写起来还是比较简单的，注意的是，测试跑完后不要忘了把 Express 销毁，即 `server.close()`。\n\n完整项目参考：\n\n[mx-space/api-client](https://github.com/mx-space/api-client)","title":"编写接口请求库单元测试与 E2E 测试的思考","summary":"在做接口请求 JS SDK 时做的一些思考与尝试。不知道有没有更好的办法。还请指点","created":"2021-12-14T14:31:47.540Z","images":[],"meta":null,"category":{"id":"5eb2c62a613a5ab0642f1f7a","type":0,"count":56,"name":"编程","slug":"programming","created":"2020-05-06T14:14:02.339Z"}},{"id":"61a4d8b9f3731396e2f99f42","modified":"2022-04-16T06:04:05.317Z","comments_index":2,"allow_comment":true,"hide":false,"copyright":true,"tags":["rollup","typescript"],"count":{"read":828,"like":2},"category_id":"5eb2c62a613a5ab0642f1f7a","slug":"build-rollup-typescript-lib","text":"本文的主题是一步一步建立 Rollup + TypeScript 代码模板。\n\n## 前言\n\n首先看看，我们需要做什么。通常一个库，在发布前他的目录树是这样的。\n\n```\n.\n├── dist\n├── esm\n├── lib\n├── node_modules\n├── package.json\n├── pnpm-lock.yaml\n├── rollup.config.js\n├── src\n├── tsconfig.json\n├── vite.config.js\n```\n\n其中，dist 目录一般是通过 Rollup 等打包器打包后的入口文件，一般具有多种格式，以不同后缀命令，如: `index.cjs.js` `index.esm.js`。lib 和 esm 目录可以是 TypeScript 编译后生成的文件，目录下的结构基本和原项目结构相同，只是后缀变为 js，lib 一般为 CommonJS 格式，esm 为 ESModule 格式。而这些是一个库最基本的需要发布的文件。\n<!-- more -->\n## 初始化项目\n\n通过如下命令快速开始：\n\n```bash\nnpm init -y\nnpm i -D typescript rollup @rollup/plugin-typescript @rollup/plugin-commonjs @rollup/plugin-node-resolve rollup-plugin-terse rollup-plugin-peer-deps-external\nnpx run tsc --init\nmkdir src\ntouch src/index.ts\necho 'export {}' >> src/index.ts\n```\n\n注：基本配置不再过多赘述，`@rollup/plugin-commonjs` 为 ES6 转换插件，`@rollup/plugin-node-resolve` 为 Node 模块解析插件，`rollup-plugin-terse` 为代码压缩插件，`rollup-plugin-peer-deps-external` 为打包时使用外部库插件（就是说，打包的时候不把依赖库打包进去，node_modules 依赖链你也知道）。\n\n建立 rollup.config.js，编写基本配置以支持 TypeScript。\n\n```js\n//@ts-check\nimport commonjs from '@rollup/plugin-commonjs'\nimport { nodeResolve } from '@rollup/plugin-node-resolve'\nimport typescript from '@rollup/plugin-typescript'\nimport peerDepsExternal from 'rollup-plugin-peer-deps-external'\nimport { terser } from 'rollup-plugin-terser'\n\nconst packageJson = require('./package.json')\n\nconst umdName = packageJson.name\n\nconst globals = {\n  ...packageJson.devDependencies,\n}\n\nconst dir = 'dist'\n\n/**\n * @type {import('rollup').RollupOptions[]}\n */\nconst config = [\n  {\n    input: 'src/index.ts',\n    // ignore lib\n    external: ['lodash', 'lodash-es', ...Object.keys(globals)],\n\n    output: [\n      {\n        file: dir + '/index.umd.js',\n        format: 'umd',\n        sourcemap: true,\n        name: umdName,\n      },\n      {\n        file: dir + '/index.umd.min.js',\n        format: 'umd',\n        sourcemap: true,\n        name: umdName,\n        plugins: [terser()],\n      },\n      {\n        file: dir + '/index.cjs.js',\n        format: 'cjs',\n        sourcemap: true,\n      },\n      {\n        file: dir + '/index.cjs.min.js',\n        format: 'cjs',\n        sourcemap: true,\n        plugins: [terser()],\n      },\n      {\n        file: dir + '/index.esm.js',\n        format: 'es',\n        sourcemap: true,\n      },\n      {\n        file: dir + '/index.esm.min.js',\n        format: 'es',\n        sourcemap: true,\n        plugins: [terser()],\n      },\n    ],\n    plugins: [\n      nodeResolve(),\n      commonjs({ include: 'node_modules/**' }),\n      typescript({ tsconfig: './src/tsconfig.json', declaration: false }),\n\n      // @ts-ignore\n      peerDepsExternal(),\n    ],\n\n    treeshake: true,\n  },\n]\n\nexport default config\n```\n\n配置之后，使用 rollup -c，就可以编译打包 ts 文件到 dist 目录了。\n\n但是这才刚刚开始。\n\n## Path Alias\n\n一般的也会用 Path Alias 方便方法的引入。\n\n在 tsconfig.json 配置 `paths`，如\n\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./src\",\n    \"paths\": {\n      \"~/*\": [\n        \"*\"\n      ]\n    },\n  }\n}\n```\n\n就可以用 `import foo from '~/'` 的形式了。为什么要讲这个。因为这个是巨坑。请看下节。\n\n## TSC 编译与 Path Alias\n\n上面说了 Rollup 的打包，再来说说 TSC，其实也比较简单。一般的，我会在根目录下新建一个 tsconfig.json 作为基本 tsconfig，然后在建立 build 用 tsconfig，开发用 tsconfig，都是从根目录的 extends 出来。这样做的好处就是不同环境用不同配置比较灵活。\n\n大概这就像这样：\n\n```\n.\n├── package.json\n├── pnpm-lock.yaml\n├── readme.md\n├── renovate.json\n├── rollup.config.js\n├── src\n│   ├── tsconfig.build.json # build\n│   ├── tsconfig.cjs.json # cjs build\n│   ├── tsconfig.json # dev\n├── tsconfig.json  # base\n├── vite.config.js\n└── yarn-error.log\n```\n\n前面说了 tsc 编译也要两种格式一个是 ESM，另一个是 CJS。就需要编写两个配置了，唯一的不同其实就是 `outDir` 和 `module`。然后编译跑这行就行了。\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"tsc --build src/tsconfig.build.json && tsc --build src/tsconfig.cjs.json\"\n  }\n}\n```\n\n好像没有什么不对，但是仔细一看人傻了，tsc 编译之后的产物没有把 Path Alias 转换过来。但是这个库被调包侠调过来之后，它的环境咋知道 `~` alias 是个啥，况且 js 也不读 tsconfig 的配置。\n\n![](https://cdn.jsdelivr.net/gh/Innei/fancy@master/2021/1129211105.png)\n\n这可咋整。\n\n一查发现别的 CLI 都用了一个工具叫 tsconfigs-paths，但是这玩意好像只是个库，用起来比较麻烦。在这之后有大佬写一个 TypeScript 的插件叫 `@zerollup/ts-transform-paths`。用于解决这个问题。由于目前 TypeScript 还不支持自定义 transformer 所以得用 ttypescript 替换 TypeScript。\n\n```bash\nnpm i -g @zerollup/ts-transform-paths ttypescript\n```\n\n```json\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\",\n    \"baseUrl\": \"./src\",\n    \"paths\": {\n      \"~/*\": [\n        \"*\"\n      ]\n    },\n    \"plugins\": [\n      {\n        \"transform\": \"@zerollup/ts-transform-paths\",\n      }\n    ]\n  }\n}\n```\n\n把 `tsc` 全换成 `ttsc`,\n\n```bash\nttsc --build src/tsconfig.build.json && ttsc --build src/tsconfig.cjs.json\"\n```\n\n之后。\n\n![](https://cdn.jsdelivr.net/gh/Innei/fancy@master/2021/1129211825.png)\n\n## 打包 DTS\n\nDTS 就是 tsc 生成 d.ts，我们要做的就是把 dts 也打包一份，全部扔到一个 index.d.ts。这样的话如果引用的是任何一个 dist 下的 index.js （比如`dist/index.esm.js`）都会识别到 type definition。\n\n但是，`@rollup/plugin-typescript` 和 `rollup-plugins-typescript2` 都没有这一功能。\n\n之后就发现了一个神器 dts-bundle-generator。可以做到这个需求，同时它也支持 Path Alias 的转换。\n\n使用也非常的简单。\n\n```bash\ndts-bundle-generator -o build/index.d.ts src/index.ts --project tsconfig.json  --no-check\n```\n\n## 一些不能工作的点\n\n1. ttsc 在 typescript 4.5.2 的环境可能会报错。`TypeError: Cannot read properties of undefined (reading 'impliedNodeFormat')`。 解决方式：降级到 4.4.4\n1. dts-bundle-generator 不能支持没有提前引入的泛型的值的解析（也可能是 目前 TS 的 bug）参考：https://github.com/timocov/dts-bundle-generator/issues/178\n\n## Package.json\n\n注明需要发布的文件，以及入口文件、类型文件。\n\n```json\n{\n  \"main\": \"build/index.cjs.js\",\n  \"module\": \"build/index.esm.js\",\n  \"types\": \"build/index.d.ts\",\n  \"unpkg\": \"build/index.umd.min.js\"\n}\n```\n\n## 后\n\n完整模板：[rollup-typescript-lib](https://github.com/Innei/rollup-typescript-lib)","title":"使用 Rollup + TypeScript 编写库","summary":"困扰我半天的原因就这？？","created":"2021-11-29T13:42:17.166Z","images":[{"width":1838,"height":414,"accent":"#6a7c9d","type":"png","src":"https://cdn.jsdelivr.net/gh/Innei/fancy@master/2021/1129211105.png"},{"width":1924,"height":516,"accent":"#64799d","type":"png","src":"https://cdn.jsdelivr.net/gh/Innei/fancy@master/2021/1129211825.png"}],"meta":null,"category":{"id":"5eb2c62a613a5ab0642f1f7a","type":0,"count":56,"name":"编程","slug":"programming","created":"2020-05-06T14:14:02.339Z"}},{"id":"61586f7e769f07b6852f3da0","modified":"2021-10-03T09:54:42.947Z","comments_index":5,"allow_comment":true,"hide":false,"copyright":true,"tags":["docker"],"count":{"read":859,"like":4},"category_id":"5ed09730a0a8f94af569c96c","slug":"host-an-entire-Mix-Space-using-Docker","text":"> 这是一篇碎碎念，可能对你有帮助\n\n国庆第二天，依旧没有出去玩。码力值拉满，终于把 Docker 搞通了。并且写了一个 docker-compose file 现在可以通过 docker compose 托管整个 Mix Space 了。容器内提供了 Caddy 2 来托管网站，替代了 Nginx，Caddy 2 的优势，配置方便，相比 Nginx 这么多配置，Caddy 只要几行就搞定了。\n\n那么，怎么使用呢。\n\n详见 [mx-space/docker](https://github.com/mx-space/docker)。\n\n什么，你还不知道 Mix Space 是什么，好吧，其实就是你现在看到的这个站点，这是一个我在去年发起的一个个人空间项目，从始至今都由我一人开发和维护。经过了多次重构和变更。可以从[这里](https://innei.ren/notes/58)了解更多。\n\n如果你觉得好用的话，请务必点个 Star。你的鼓励是我前进最大的动力。\n\n对于前后端分离的项目，在部署上最大的绊脚石就是这么多个项目接连到一起，需要通过环境变量方式去控制，而且需要多次构建。独立的项目没有服务发现的能力，在部署上对新手不太友好，即便是略懂一点前端但是没有前端工程化经验的人。\n\n现在有了 Docker 之后，这些事情就交给他吧。\n\n大概也只有自己做的东西才提得起兴趣了吧。\n\n![!Timing](https://cdn.jsdelivr.net/gh/Innei/fancy@master/2021/1002224017.png)","title":"终于可以使用 Docker 托管整个 Mix Space 了","summary":"终于可以使用 Docker 托管整个 Mix Space 了。好耶！ヾ(✿ﾟ▽ﾟ)ノ","created":"2021-10-02T14:41:02.742Z","images":[{"height":1824,"width":2786,"type":"png","accent":"#753a63","src":"https://cdn.jsdelivr.net/gh/Innei/fancy@master/2021/1002224017.png"}],"meta":null,"category":{"id":"5ed09730a0a8f94af569c96c","type":0,"count":12,"slug":"website","name":"站点日志","created":"2020-05-29T05:01:36.315Z"}},{"id":"614c539cfdf566c5d93a383f","modified":"2021-09-23T10:20:00.305Z","comments_index":1,"allow_comment":true,"hide":false,"copyright":true,"tags":["docker","node"],"count":{"read":474,"like":4},"category_id":"5eb2c62a613a5ab0642f1f7e","slug":"docker-node-ncc","text":"> 首先声明，这不是一个教程贴，更多的是遇到的问题和解决方式。内容仅供参考。\n\n一直以来就想把 Node 应用容器化，奈何一直没有精力去捣鼓。今天下午捣鼓了一下午，终于捣鼓出来了。说说遇到坑还有怎么去解决吧。至于 docker 这玩意怎么去用网上内容一搜一大把。没有必要再去描述了。\n\n## 编写 Dockerfile\n\n首先，我们这次要做的容器首先肯定是要摆脱 node_modules 的，不能我 build 完 image 之后 push 到 docker hub，用户 pull 来之后还要再 `npm install` 一下的。这肯定是不行的。具体怎么实现摆脱 node_modules ，我在上一篇文章中讲述过了，可以参考一下 [使用 GitHub CI 云构建和自动部署](https://innei.ren/posts/technology/github-ci-cd)。\n\n在项目根目录新建一个 dockerfile，编写如下。\n\n```bash\nFROM node:16 as builder\nWORKDIR /app\nCOPY . .\nRUN npm i -g pnpm\nRUN pnpm install\nRUN pnpm bundle # 可以参考 rimraf out && yarn run build && cd dist/src && npx ncc build main.js -o ../../out -m\n\nFROM node:16\nWORKDIR /app\nCOPY --from=builder /app/out .\nEXPOSE 2333\nCMD node index.js\n\n```\n\n这里用了两个 worker 去构建，第一个先 build 项目，生成构建产物，然后在第二个 worker copy 第一个中的构建产物，最后生成的 image 仅仅只有第二个的，第一个 builder 不会封装进去，可以大大减少 image 的体积。\n\n这样 build 出来的 image 最终是 1G 左右，用户可以直接 pull 就直接跑的。这个体积算大吗，除了自带的 node、Debian 环境没有引入其他的包甚至 node_modules。再体积方面，可以用 node:16-alpine 这个 image 继续做优化，apline 是最小化的 Linux 镜像了（大概），整个 image 只有 200M 左右，应经测试，用 apline 构建出来的 image 体积只有 250M。可以对比一下。但是为什么我最终没有用 apline 呢，原因还是他太小了，ncc build 项目的时候缺了一堆库，就算用 apk 把缺的库全部补上之后，在生产中依旧跑不起来，可能还是摆脱不了 node_modules，多次尝试后，以失败告终。如有好的办法请联系我。\n\n![image-20210923175621771](https://cdn.jsdelivr.net/gh/Innei/fancy@master/2021/0923175621.png)\n\n我的项目中用到了 MongoDB 和 Redis，那么就需要再去编写 docker-compose。这个就没啥好说了，网上一搜一大把。给个参考吧。而我想说的是，我遇到的坑。\n\n```yaml\nversion: '3.8'\n\nservices:\n  app:\n    container_name: mx-server\n    image: innei/mx-server:latest\n    restart: 'on-failure'\n    ports:\n      - '2333:2333'\n    depends_on:\n      - mongo\n      - redis\n    links:\n      - mongo\n      - redis\n    networks:\n      - app-network\n\n  mongo:\n    container_name: mongo\n    image: mongo\n    volumes:\n      - ./data:/data/db\n    ports:\n      - '3344:27017'\n    networks:\n      - app-network\n\n  redis:\n    image: redis\n    container_name: redis\n\n    ports:\n      - '3333:6379'\n    networks:\n      - app-network\nnetworks:\n  app-network:\n    driver: bridge\n\n```\n\n首先是，在项目中，mongo 和 redis 连得都是 127.0.0.1 但是在 docker-compose up 之后，连不上，怎么回事，后来知道是要改成 service 的名字。就比如\n\n```yaml\n\nservices:\n  mongo:       # 这里的 name 是啥 到时候连的时候 host 就要填这个\n    container_name: mongo\n    image: mongo\n    volumes:\n      - ./data:/data/db\n    ports:\n      - '3344:27017'\n    networks:\n      - app-network\n\n```\n\n上面的案例，在项目中的连接地址必须是 `mongodb://mongo:27017`。然后原先项目中的 host 定义都是通过 argv 传递的，如\n\n```typescript\nexport const MONGO_DB = {\n  collectionName: (argv.collection_name as string) || 'mx-space',\n  get uri() {\n    return `mongodb://${argv.db_host || '127.0.0.1'}:${\n      argv.db_port || '27017'\n    }/${process.env.TEST ? 'mx-space_unitest' : this.collectionName}`\n  },\n}\n```\n\n然后就一直再找，怎么在 run 的时候 pass argument，最后也是找了一圈没找到。说是可以在 dockerfile 中。加上这两行可以读到 argument。\n\n```\nFROM node:16\nARG redis_host # 这个\nARG mongo_host # 这个\n```\n\n但是，这好像实在 build 的时候就要传递的，那还不如写死算了。所有就变成了这样，也是最后的样子。\n\n```docker\nFROM node:16 as builder\nWORKDIR /app\nCOPY . .\nRUN npm i -g pnpm\nRUN pnpm install\nRUN pnpm bundle\n\nFROM node:16\nARG redis_host\nARG mongo_host\nRUN apt update\nRUN apt install zip unzip mongo-tools -y # 因为业务需要额外的 command tools\n\nWORKDIR /app\nCOPY --from=builder /app/out .\nEXPOSE 2333\nCMD node index.js --redis_host=redis --db_host=mongo # 直接 pass argument\n```\n\n## GitHub CI 自动化构建发布\n\n这一步倒是很简单的，官方有自己的 github action 给你用了，直接去 docker hub 先生成一个 token，填入 secrets。就没什么问题了。关于 GitHub workflow 的 yaml 可以贴一下。可以参考。\n\n```yaml\nname: Docker build\n\non:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10\n    # branches:\n    #   - 'master'\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v1\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n      - name: Login to DockerHub\n        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      - name: Build and push\n        id: docker_build\n        uses: docker/build-push-action@v2\n        with:\n          push: true\n          tags: innei/mx-server:latest\n\n```\n\n然后现在的话，[mx-server](https://github.com/mx-space/server-next) 可以上 docker hub 了，可以直接跑在 docker 了。单用户可以直接用一下命令跑起服务。奈斯。\n\n```bash\ncd\nmkdir -p mx/server\ncd mx/server\nwget https://cdn.jsdelivr.net/gh/mx-space/server-next@master/docker-compose.yml\ndocker-compose up -d\n```","title":"再遇 Docker，容器化 Node 应用","summary":null,"created":"2021-09-23T10:14:52.491Z","images":[{"height":306,"width":2148,"type":"png","accent":"#808688","src":"https://cdn.jsdelivr.net/gh/Innei/fancy@master/2021/0923175621.png"}],"meta":null,"category":{"id":"5eb2c62a613a5ab0642f1f7e","type":0,"count":11,"name":"技术","slug":"technology","created":"2020-05-06T14:14:02.375Z"}},{"id":"613c91d0326cfffc61923ea2","modified":"2022-03-11T06:17:31.790Z","comments_index":2,"allow_comment":true,"hide":false,"copyright":true,"tags":[],"count":{"read":629,"like":1},"category_id":"5eb2c62a613a5ab0642f1f7e","slug":"github-ci-cd","text":"最近这段时间把拖延已久的重构计划重新规划起来了。在经过一周多的努力终于把原先项目结构非常不堪的小站后端重构了一版。\n\n原先的项目有以下几个痛点：\n\n- node_modules 过于庞大，动辄 1G+\n- 构建时间长，受限于服务器性能\n- 目录结构混乱\n\n最后一个问题可以通过重构和学习他人项目架构解决。而第一个问题也可以使用 pnpm 管理减少依赖的体积。\n\n问题是如何减少构建时间。解决方式：使用 GitHub 云构建，部署服务器复用云构建产物。\n\n确定了目标之后，有以下几个需求需要解决：\n\n- 构建完自动部署\n- 部署服务器端摆脱 node_modules 的依赖\n\n一般 node 应用构建使用 tsc、webpack 去打包，但是运行时依旧依赖 node_modules，能否像前端应用一样，打包之后摆脱 node_modules。答案是可以。@vercel/ncc 已经发布 0.31.0（截止文章发布前），在原有的基础上修正了很多打包不全，打包文件缺失的问题，经过测试，该版本已经完全符合需求。\n\n需要注意的是，使用 ncc 打包之后，运行端和打包端运行的系统必须一致，比如 ncc 打包的系统是 Ubuntu，理论上运行构建产物的一方系统也必须是 Ubuntu。因为 ncc 会在打包过程中同时打包其他语言编译而成的二进制文件。\n\n构建流程为：\n\n```mermaid\n\nflowchart TD\n\n\t1([nest build]) -- dist/src/main.js --> 2([ncc build dist/src/main.js -o out])\n\n```\n\n经过验证，node_modules 原本为 350M，ncc 打包之后参数只有 30M+。经过 zip 压缩之后可以控制在 10M 以内。\n\n在 GitHub CI 的流程为：\n\n```mermaid\n\nflowchart TD\n\n    1([手动打 tag 发布一个 release]) --> \n\n    2([CI 监视 release 的发布 开始构建和发布]) -->\n\n    3([云构建打包产物 zip 发布到 GitHub Release]) -- SSH 连接到服务器-->\n\n    4([执行部署脚本]) -->\n\n    5([下载构建产物解压]) -->\n\n    6([直接运行或使用 PM2 托管])\n\n```\n\n从而很好的摆脱了 node_modules 的依赖，和大大减少了构建时间。甚至在服务端无需构建。奈斯。\n\n完整的 CI 流程可以参考：https://github.com/mx-space/server-next/blob/master/.github/workflows/release.yml\n\n以后 SSH 之后的部署脚本参考：https://github.com/mx-space/server-next/blob/master/scripts/deploy.js\n\n完整的 GitHub flow 可以查看：https://github.com/mx-space/server-next/actions/runs/1223394127","title":"使用 GitHub CI 云构建和自动部署","summary":null,"created":"2021-09-11T11:24:00.424Z","images":[],"meta":null,"category":{"id":"5eb2c62a613a5ab0642f1f7e","type":0,"count":11,"name":"技术","slug":"technology","created":"2020-05-06T14:14:02.375Z"}},{"id":"611748895c2f6f4d3ba0d9b3","comments_index":3,"allow_comment":true,"hide":false,"copyright":true,"tags":[],"count":{"read":513,"like":0},"text":"pageproxy，是团队内部提到到一个名词，之前在网上搜索过并没有找到相关的结果。pageproxy 是为 spa 引用提供了动态注入参数的能力，当然如同字面意思，他是一个代理，通过服务端的一次代理请求 spa 地址，改写 HTML 之后再返回给用户浏览器渲染。\n\n这是一个传统的 SPA 鉴权的过程，后端的接口地址完全写死在代码中，如果需要去修改就需要修改代码再编译打包上线。\n\n<img src=\"data:image/svg+xml;utf8,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%20standalone%3D%22no%22%3F%3E%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20contentScriptType%3D%22application%2Fecmascript%22%20contentStyleType%3D%22text%2Fcss%22%20height%3D%22522px%22%20preserveAspectRatio%3D%22none%22%20style%3D%22width%3A616px%3Bheight%3A522px%3B%22%20version%3D%221.1%22%20viewBox%3D%220%200%20616%20522%22%20width%3D%22616px%22%20zoomAndPan%3D%22magnify%22%3E%3Cdefs%3E%3Cfilter%20height%3D%22300%25%22%20id%3D%22fstyrwm91qph0%22%20width%3D%22300%25%22%20x%3D%22-1%22%20y%3D%22-1%22%3E%3CfeGaussianBlur%20result%3D%22blurOut%22%20stdDeviation%3D%222.0%22%2F%3E%3CfeColorMatrix%20in%3D%22blurOut%22%20result%3D%22blurOut2%22%20type%3D%22matrix%22%20values%3D%220%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%20.4%200%22%2F%3E%3CfeOffset%20dx%3D%224.0%22%20dy%3D%224.0%22%20in%3D%22blurOut2%22%20result%3D%22blurOut3%22%2F%3E%3CfeBlend%20in%3D%22SourceGraphic%22%20in2%3D%22blurOut3%22%20mode%3D%22normal%22%2F%3E%3C%2Ffilter%3E%3C%2Fdefs%3E%3Cg%3E%3Crect%20fill%3D%22%23FFFFFF%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20height%3D%22331.3281%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20width%3D%2210%22%20x%3D%2217%22%20y%3D%2298.2969%22%2F%3E%3Crect%20fill%3D%22%23FFFFFF%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20height%3D%22310.1953%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20width%3D%2210%22%20x%3D%22114%22%20y%3D%22119.4297%22%2F%3E%3Crect%20fill%3D%22%23FFFFFF%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20height%3D%2229.1328%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20width%3D%2210%22%20x%3D%22431%22%20y%3D%22148.5625%22%2F%3E%3Crect%20fill%3D%22%23FFFFFF%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20height%3D%22180.6641%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20width%3D%2210%22%20x%3D%22557%22%20y%3D%22248.9609%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3Bstroke-dasharray%3A5.0%2C5.0%3B%22%20x1%3D%2222%22%20x2%3D%2222%22%20y1%3D%2288.2969%22%20y2%3D%22438.625%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3Bstroke-dasharray%3A5.0%2C5.0%3B%22%20x1%3D%22119%22%20x2%3D%22119%22%20y1%3D%2288.2969%22%20y2%3D%22438.625%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3Bstroke-dasharray%3A5.0%2C5.0%3B%22%20x1%3D%22436%22%20x2%3D%22436%22%20y1%3D%2288.2969%22%20y2%3D%22438.625%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3Bstroke-dasharray%3A5.0%2C5.0%3B%22%20x1%3D%22562%22%20x2%3D%22562%22%20y1%3D%2288.2969%22%20y2%3D%22438.625%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2228%22%20x%3D%225%22%20y%3D%2284.9951%22%3E%E7%94%A8%E6%88%B7%3C%2Ftext%3E%3Cellipse%20cx%3D%2222%22%20cy%3D%2215%22%20fill%3D%22%23FEFECE%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20rx%3D%228%22%20ry%3D%228%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A2.0%3B%22%2F%3E%3Cpath%20d%3D%22M22%2C23%20L22%2C50%20M9%2C31%20L35%2C31%20M22%2C50%20L9%2C65%20M22%2C50%20L35%2C65%20%22%20fill%3D%22none%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A2.0%3B%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2228%22%20x%3D%225%22%20y%3D%22450.6201%22%3E%E7%94%A8%E6%88%B7%3C%2Ftext%3E%3Cellipse%20cx%3D%2222%22%20cy%3D%22463.9219%22%20fill%3D%22%23FEFECE%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20rx%3D%228%22%20ry%3D%228%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A2.0%3B%22%2F%3E%3Cpath%20d%3D%22M22%2C471.9219%20L22%2C498.9219%20M9%2C479.9219%20L35%2C479.9219%20M22%2C498.9219%20L9%2C513.9219%20M22%2C498.9219%20L35%2C513.9219%20%22%20fill%3D%22none%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A2.0%3B%22%2F%3E%3Crect%20fill%3D%22%23FEFECE%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20height%3D%2230.2969%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.5%3B%22%20width%3D%2256%22%20x%3D%2289%22%20y%3D%2253%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2242%22%20x%3D%2296%22%20y%3D%2272.9951%22%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3C%2Ftext%3E%3Crect%20fill%3D%22%23FEFECE%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20height%3D%2230.2969%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.5%3B%22%20width%3D%2256%22%20x%3D%2289%22%20y%3D%22437.625%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2242%22%20x%3D%2296%22%20y%3D%22457.6201%22%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3C%2Ftext%3E%3Crect%20fill%3D%22%23FFA500%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20height%3D%2230.2969%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.5%3B%22%20width%3D%22140%22%20x%3D%22364%22%20y%3D%2253%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%22126%22%20x%3D%22371%22%20y%3D%2272.9951%22%3E%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%89%98%E7%AE%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%3C%2Ftext%3E%3Crect%20fill%3D%22%23FFA500%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20height%3D%2230.2969%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.5%3B%22%20width%3D%22140%22%20x%3D%22364%22%20y%3D%22437.625%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%22126%22%20x%3D%22371%22%20y%3D%22457.6201%22%3E%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%89%98%E7%AE%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%3C%2Ftext%3E%3Crect%20fill%3D%22%23FEFECE%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20height%3D%2230.2969%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.5%3B%22%20width%3D%2284%22%20x%3D%22518%22%20y%3D%2253%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2270%22%20x%3D%22525%22%20y%3D%2272.9951%22%3E%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E5%99%A8%3C%2Ftext%3E%3Crect%20fill%3D%22%23FEFECE%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20height%3D%2230.2969%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.5%3B%22%20width%3D%2284%22%20x%3D%22518%22%20y%3D%22437.625%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2270%22%20x%3D%22525%22%20y%3D%22457.6201%22%3E%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E5%99%A8%3C%2Ftext%3E%3Crect%20fill%3D%22%23FFFFFF%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20height%3D%22331.3281%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20width%3D%2210%22%20x%3D%2217%22%20y%3D%2298.2969%22%2F%3E%3Crect%20fill%3D%22%23FFFFFF%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20height%3D%22310.1953%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20width%3D%2210%22%20x%3D%22114%22%20y%3D%22119.4297%22%2F%3E%3Crect%20fill%3D%22%23FFFFFF%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20height%3D%2229.1328%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20width%3D%2210%22%20x%3D%22431%22%20y%3D%22148.5625%22%2F%3E%3Crect%20fill%3D%22%23FFFFFF%22%20filter%3D%22url(%23fstyrwm91qph0)%22%20height%3D%22180.6641%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20width%3D%2210%22%20x%3D%22557%22%20y%3D%22248.9609%22%2F%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%22102%2C115.4297%2C112%2C119.4297%2C102%2C123.4297%2C106%2C119.4297%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%2227%22%20x2%3D%22108%22%20y1%3D%22119.4297%22%20y2%3D%22119.4297%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%2234%22%20y%3D%22114.3638%22%3E1%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2255%22%20x%3D%2247%22%20y%3D%22114.3638%22%3E%E8%BE%93%E5%85%A5%20URL%3C%2Ftext%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%22419%2C144.5625%2C429%2C148.5625%2C419%2C152.5625%2C423%2C148.5625%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22124%22%20x2%3D%22425%22%20y1%3D%22148.5625%22%20y2%3D%22148.5625%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%22131%22%20y%3D%22143.4966%22%3E2%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%22151%22%20x%3D%22144%22%20y%3D%22143.4966%22%3E%E8%AF%B7%E6%B1%82%20SPA%20%E9%A1%B5%E9%9D%A2%E5%92%8C%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%3C%2Ftext%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%22135%2C173.6953%2C125%2C177.6953%2C135%2C181.6953%2C131%2C177.6953%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22129%22%20x2%3D%22435%22%20y1%3D%22177.6953%22%20y2%3D%22177.6953%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%22141%22%20y%3D%22172.6294%22%3E3%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%22134%22%20x%3D%22154%22%20y%3D%22172.6294%22%3E%E8%BF%94%E5%9B%9E%20HTML%20%E5%92%8C%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%3C%2Ftext%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22124%22%20x2%3D%22166%22%20y1%3D%22211.8281%22%20y2%3D%22211.8281%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22166%22%20x2%3D%22166%22%20y1%3D%22211.8281%22%20y2%3D%22224.8281%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22119%22%20x2%3D%22166%22%20y1%3D%22224.8281%22%20y2%3D%22224.8281%22%2F%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%22129%2C220.8281%2C119%2C224.8281%2C129%2C228.8281%2C125%2C224.8281%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%22131%22%20y%3D%22206.7622%22%3E4%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%22280%22%20x%3D%22144%22%20y%3D%22206.7622%22%3E%E4%BB%8E%E8%8E%B7%E5%8F%96%E5%88%B0%E7%9A%84%20JS%20%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E5%9C%B0%E5%9D%80%EF%BC%88%E4%BB%A3%E7%A0%81%E5%86%99%E6%AD%BB%EF%BC%89%3C%2Ftext%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%22545%2C244.9609%2C555%2C248.9609%2C545%2C252.9609%2C549%2C248.9609%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22124%22%20x2%3D%22551%22%20y1%3D%22248.9609%22%20y2%3D%22248.9609%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%22131%22%20y%3D%22243.895%22%3E5%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%22169%22%20x%3D%22144%22%20y%3D%22243.895%22%3E%E8%AF%B7%E6%B1%82%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%EF%BC%8C%E9%89%B4%E6%9D%83%E6%98%AF%E5%90%A6%E9%80%9A%E8%BF%87%3C%2Ftext%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%22135%2C274.0938%2C125%2C278.0938%2C135%2C282.0938%2C131%2C278.0938%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22129%22%20x2%3D%22556%22%20y1%3D%22278.0938%22%20y2%3D%22278.0938%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%22141%22%20y%3D%22273.0278%22%3E6%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2252%22%20x%3D%22154%22%20y%3D%22273.0278%22%3E%E9%AA%8C%E8%AF%81%E9%80%9A%E8%BF%87%3C%2Ftext%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22124%22%20x2%3D%22166%22%20y1%3D%22307.2266%22%20y2%3D%22307.2266%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22166%22%20x2%3D%22166%22%20y1%3D%22307.2266%22%20y2%3D%22320.2266%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22125%22%20x2%3D%22166%22%20y1%3D%22320.2266%22%20y2%3D%22320.2266%22%2F%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%22135%2C316.2266%2C125%2C320.2266%2C135%2C324.2266%2C131%2C320.2266%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%22131%22%20y%3D%22302.1606%22%3E7%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%22102%22%20x%3D%22144%22%20y%3D%22302.1606%22%3E%E8%B7%B3%E8%BD%AC%20%2Fdashboard%3C%2Ftext%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%22135%2C345.3594%2C125%2C349.3594%2C135%2C353.3594%2C131%2C349.3594%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22129%22%20x2%3D%22556%22%20y1%3D%22349.3594%22%20y2%3D%22349.3594%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%22141%22%20y%3D%22344.2935%22%3E8%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2265%22%20x%3D%22154%22%20y%3D%22344.2935%22%3E%E9%AA%8C%E8%AF%81%E4%B8%8D%E9%80%9A%E8%BF%87%3C%2Ftext%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22124%22%20x2%3D%22166%22%20y1%3D%22378.4922%22%20y2%3D%22378.4922%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22166%22%20x2%3D%22166%22%20y1%3D%22378.4922%22%20y2%3D%22391.4922%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22125%22%20x2%3D%22166%22%20y1%3D%22391.4922%22%20y2%3D%22391.4922%22%2F%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%22135%2C387.4922%2C125%2C391.4922%2C135%2C395.4922%2C131%2C391.4922%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%22131%22%20y%3D%22373.4263%22%3E9%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2264%22%20x%3D%22144%22%20y%3D%22373.4263%22%3E%E8%B7%B3%E8%BD%AC%20%2Flogin%3C%2Ftext%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%2238%2C416.625%2C28%2C420.625%2C38%2C424.625%2C34%2C420.625%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3Bstroke-dasharray%3A2.0%2C2.0%3B%22%20x1%3D%2232%22%20x2%3D%22113%22%20y1%3D%22420.625%22%20y2%3D%22420.625%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2218%22%20x%3D%2244%22%20y%3D%22415.5591%22%3E10%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%220%22%20x%3D%2270%22%20y%3D%22415.5591%22%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E\" data-testid=\"ne-text-diagram-img\" style=\"background: white\">\n\n而使用 pageproxy 只需要保证服务端地址一定，其他都可以通过参数注入的方式实现自定义。用户鉴权也不再需要浏览器再次调用接口判断实现跳转登陆，而是能在第一次请求之后直接 301 到登录页。\n\n<img src=\"data:image/svg+xml;utf8,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%20standalone%3D%22no%22%3F%3E%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20contentScriptType%3D%22application%2Fecmascript%22%20contentStyleType%3D%22text%2Fcss%22%20height%3D%22467px%22%20preserveAspectRatio%3D%22none%22%20style%3D%22width%3A1282px%3Bheight%3A467px%3B%22%20version%3D%221.1%22%20viewBox%3D%220%200%201282%20467%22%20width%3D%221282px%22%20zoomAndPan%3D%22magnify%22%3E%3Cdefs%3E%3Cfilter%20height%3D%22300%25%22%20id%3D%22f52rw49uuwvx7%22%20width%3D%22300%25%22%20x%3D%22-1%22%20y%3D%22-1%22%3E%3CfeGaussianBlur%20result%3D%22blurOut%22%20stdDeviation%3D%222.0%22%2F%3E%3CfeColorMatrix%20in%3D%22blurOut%22%20result%3D%22blurOut2%22%20type%3D%22matrix%22%20values%3D%220%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%20.4%200%22%2F%3E%3CfeOffset%20dx%3D%224.0%22%20dy%3D%224.0%22%20in%3D%22blurOut2%22%20result%3D%22blurOut3%22%2F%3E%3CfeBlend%20in%3D%22SourceGraphic%22%20in2%3D%22blurOut3%22%20mode%3D%22normal%22%2F%3E%3C%2Ffilter%3E%3C%2Fdefs%3E%3Cg%3E%3Crect%20fill%3D%22%23FFFFFF%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20height%3D%22276.1953%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20width%3D%2210%22%20x%3D%2217%22%20y%3D%2298.2969%22%2F%3E%3Crect%20fill%3D%22%23FFFFFF%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20height%3D%22246.0625%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20width%3D%2210%22%20x%3D%22114%22%20y%3D%22119.4297%22%2F%3E%3Crect%20fill%3D%22%23FFFFFF%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20height%3D%22225.9297%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20width%3D%2210%22%20x%3D%22785%22%20y%3D%22148.5625%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3Bstroke-dasharray%3A5.0%2C5.0%3B%22%20x1%3D%2222%22%20x2%3D%2222%22%20y1%3D%2288.2969%22%20y2%3D%22383.4922%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3Bstroke-dasharray%3A5.0%2C5.0%3B%22%20x1%3D%22119%22%20x2%3D%22119%22%20y1%3D%2288.2969%22%20y2%3D%22383.4922%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3Bstroke-dasharray%3A5.0%2C5.0%3B%22%20x1%3D%22231%22%20x2%3D%22231%22%20y1%3D%2288.2969%22%20y2%3D%22383.4922%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3Bstroke-dasharray%3A5.0%2C5.0%3B%22%20x1%3D%22790%22%20x2%3D%22790%22%20y1%3D%2288.2969%22%20y2%3D%22383.4922%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3Bstroke-dasharray%3A5.0%2C5.0%3B%22%20x1%3D%221221%22%20x2%3D%221221%22%20y1%3D%2288.2969%22%20y2%3D%22383.4922%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2228%22%20x%3D%225%22%20y%3D%2284.9951%22%3E%E7%94%A8%E6%88%B7%3C%2Ftext%3E%3Cellipse%20cx%3D%2222%22%20cy%3D%2215%22%20fill%3D%22%23FEFECE%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20rx%3D%228%22%20ry%3D%228%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A2.0%3B%22%2F%3E%3Cpath%20d%3D%22M22%2C23%20L22%2C50%20M9%2C31%20L35%2C31%20M22%2C50%20L9%2C65%20M22%2C50%20L35%2C65%20%22%20fill%3D%22none%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A2.0%3B%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2228%22%20x%3D%225%22%20y%3D%22395.4873%22%3E%E7%94%A8%E6%88%B7%3C%2Ftext%3E%3Cellipse%20cx%3D%2222%22%20cy%3D%22408.7891%22%20fill%3D%22%23FEFECE%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20rx%3D%228%22%20ry%3D%228%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A2.0%3B%22%2F%3E%3Cpath%20d%3D%22M22%2C416.7891%20L22%2C443.7891%20M9%2C424.7891%20L35%2C424.7891%20M22%2C443.7891%20L9%2C458.7891%20M22%2C443.7891%20L35%2C458.7891%20%22%20fill%3D%22none%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A2.0%3B%22%2F%3E%3Crect%20fill%3D%22%23FEFECE%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20height%3D%2230.2969%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.5%3B%22%20width%3D%2256%22%20x%3D%2289%22%20y%3D%2253%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2242%22%20x%3D%2296%22%20y%3D%2272.9951%22%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3C%2Ftext%3E%3Crect%20fill%3D%22%23FEFECE%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20height%3D%2230.2969%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.5%3B%22%20width%3D%2256%22%20x%3D%2289%22%20y%3D%22382.4922%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2242%22%20x%3D%2296%22%20y%3D%22402.4873%22%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3C%2Ftext%3E%3Crect%20fill%3D%22%23FFA500%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20height%3D%2230.2969%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.5%3B%22%20width%3D%22140%22%20x%3D%22159%22%20y%3D%2253%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%22126%22%20x%3D%22166%22%20y%3D%2272.9951%22%3E%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%89%98%E7%AE%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%3C%2Ftext%3E%3Crect%20fill%3D%22%23FFA500%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20height%3D%2230.2969%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.5%3B%22%20width%3D%22140%22%20x%3D%22159%22%20y%3D%22382.4922%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%22126%22%20x%3D%22166%22%20y%3D%22402.4873%22%3E%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%89%98%E7%AE%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%3C%2Ftext%3E%3Crect%20fill%3D%22%23FEFECE%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20height%3D%2230.2969%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.5%3B%22%20width%3D%2284%22%20x%3D%22746%22%20y%3D%2253%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2270%22%20x%3D%22753%22%20y%3D%2272.9951%22%3E%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E5%99%A8%3C%2Ftext%3E%3Crect%20fill%3D%22%23FEFECE%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20height%3D%2230.2969%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.5%3B%22%20width%3D%2284%22%20x%3D%22746%22%20y%3D%22382.4922%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2270%22%20x%3D%22753%22%20y%3D%22402.4873%22%3E%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E5%99%A8%3C%2Ftext%3E%3Crect%20fill%3D%22%23FEFECE%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20height%3D%2230.2969%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.5%3B%22%20width%3D%2298%22%20x%3D%221170%22%20y%3D%2253%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2284%22%20x%3D%221177%22%20y%3D%2272.9951%22%3E%E7%BB%9F%E4%B8%80%E7%99%BB%E5%BD%95%E5%B9%B3%E5%8F%B0%3C%2Ftext%3E%3Crect%20fill%3D%22%23FEFECE%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20height%3D%2230.2969%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.5%3B%22%20width%3D%2298%22%20x%3D%221170%22%20y%3D%22382.4922%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2214%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2284%22%20x%3D%221177%22%20y%3D%22402.4873%22%3E%E7%BB%9F%E4%B8%80%E7%99%BB%E5%BD%95%E5%B9%B3%E5%8F%B0%3C%2Ftext%3E%3Crect%20fill%3D%22%23FFFFFF%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20height%3D%22276.1953%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20width%3D%2210%22%20x%3D%2217%22%20y%3D%2298.2969%22%2F%3E%3Crect%20fill%3D%22%23FFFFFF%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20height%3D%22246.0625%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20width%3D%2210%22%20x%3D%22114%22%20y%3D%22119.4297%22%2F%3E%3Crect%20fill%3D%22%23FFFFFF%22%20filter%3D%22url(%23f52rw49uuwvx7)%22%20height%3D%22225.9297%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20width%3D%2210%22%20x%3D%22785%22%20y%3D%22148.5625%22%2F%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%22102%2C115.4297%2C112%2C119.4297%2C102%2C123.4297%2C106%2C119.4297%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%2227%22%20x2%3D%22108%22%20y1%3D%22119.4297%22%20y2%3D%22119.4297%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%2234%22%20y%3D%22114.3638%22%3E1%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2255%22%20x%3D%2247%22%20y%3D%22114.3638%22%3E%E8%BE%93%E5%85%A5%20URL%3C%2Ftext%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%22773%2C144.5625%2C783%2C148.5625%2C773%2C152.5625%2C777%2C148.5625%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22124%22%20x2%3D%22779%22%20y1%3D%22148.5625%22%20y2%3D%22148.5625%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%22131%22%20y%3D%22143.4966%22%3E2%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%22151%22%20x%3D%22144%22%20y%3D%22143.4966%22%3E%E8%AF%B7%E6%B1%82%20SPA%20%E9%A1%B5%E9%9D%A2%E5%92%8C%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%3C%2Ftext%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22795%22%20x2%3D%22837%22%20y1%3D%22177.6953%22%20y2%3D%22177.6953%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22837%22%20x2%3D%22837%22%20y1%3D%22177.6953%22%20y2%3D%22190.6953%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22796%22%20x2%3D%22837%22%20y1%3D%22190.6953%22%20y2%3D%22190.6953%22%2F%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%22806%2C186.6953%2C796%2C190.6953%2C806%2C194.6953%2C802%2C190.6953%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%22802%22%20y%3D%22172.6294%22%3E3%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2265%22%20x%3D%22815%22%20y%3D%22172.6294%22%3E%E9%89%B4%E6%9D%83%E4%B8%AD%E9%97%B4%E4%BB%B6%3C%2Ftext%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%22242%2C215.8281%2C232%2C219.8281%2C242%2C223.8281%2C238%2C219.8281%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22236%22%20x2%3D%22784%22%20y1%3D%22219.8281%22%20y2%3D%22219.8281%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%22248%22%20y%3D%22214.7622%22%3E4%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%22517%22%20x%3D%22261%22%20y%3D%22214.7622%22%3E%E9%89%B4%E6%9D%83%E9%80%9A%E8%BF%87%EF%BC%8C%E8%8E%B7%E5%8F%96%20SPA%20%E9%A1%B5%E9%9D%A2%E5%92%8C%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%EF%BC%8C%E5%B9%B6%E5%9C%A8%20HTML%20%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E6%B3%A8%E5%85%A5%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E5%92%8C%E6%8E%A5%E5%8F%A3%E4%BF%A1%E6%81%AFetc.%3C%2Ftext%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%22135%2C244.9609%2C125%2C248.9609%2C135%2C252.9609%2C131%2C248.9609%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22129%22%20x2%3D%22784%22%20y1%3D%22248.9609%22%20y2%3D%22248.9609%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%22141%22%20y%3D%22243.895%22%3E5%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%22186%22%20x%3D%22154%22%20y%3D%22243.895%22%3E%E8%BF%94%E5%9B%9E%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84%20HTML%20%E5%92%8C%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%3C%2Ftext%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%221209%2C274.0938%2C1219%2C278.0938%2C1209%2C282.0938%2C1213%2C278.0938%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22795%22%20x2%3D%221215%22%20y1%3D%22278.0938%22%20y2%3D%22278.0938%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%22802%22%20y%3D%22273.0278%22%3E6%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%22389%22%20x%3D%22815%22%20y%3D%22273.0278%22%3E%E9%89%B4%E6%9D%83%E4%B8%8D%E9%80%9A%E8%BF%87%EF%BC%8C301%20%E8%B7%B3%E8%BD%AC%E7%BB%9F%E4%B8%80%E7%99%BB%E5%BD%95%E9%A1%B5%EF%BC%8C%E8%8E%B7%E5%8F%96%E5%85%B6%E4%BB%96%E7%99%BB%E9%99%86%E9%A1%B5%EF%BC%8C%E5%AE%9E%E7%8E%B0%20oauth2%3C%2Ftext%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%2238%2C303.2266%2C28%2C307.2266%2C38%2C311.2266%2C34%2C307.2266%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3Bstroke-dasharray%3A2.0%2C2.0%3B%22%20x1%3D%2232%22%20x2%3D%22113%22%20y1%3D%22307.2266%22%20y2%3D%22307.2266%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%2244%22%20y%3D%22302.1606%22%3E7%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%220%22%20x%3D%2261%22%20y%3D%22302.1606%22%2F%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%221209%2C332.3594%2C1219%2C336.3594%2C1209%2C340.3594%2C1213%2C336.3594%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22124%22%20x2%3D%221215%22%20y1%3D%22336.3594%22%20y2%3D%22336.3594%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%22131%22%20y%3D%22331.2935%22%3E8%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2226%22%20x%3D%22144%22%20y%3D%22331.2935%22%3E%E7%99%BB%E9%99%86%3C%2Ftext%3E%3Cpolygon%20fill%3D%22%23A80036%22%20points%3D%22773%2C361.4922%2C783%2C365.4922%2C773%2C369.4922%2C777%2C365.4922%22%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%2F%3E%3Cline%20style%3D%22stroke%3A%23A80036%3Bstroke-width%3A1.0%3B%22%20x1%3D%22119%22%20x2%3D%22779%22%20y1%3D%22365.4922%22%20y2%3D%22365.4922%22%2F%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20font-weight%3D%22bold%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%229%22%20x%3D%22126%22%20y%3D%22360.4263%22%3E9%3C%2Ftext%3E%3Ctext%20fill%3D%22%23000000%22%20font-family%3D%22sans-serif%22%20font-size%3D%2213%22%20lengthAdjust%3D%22spacing%22%20textLength%3D%2265%22%20x%3D%22139%22%20y%3D%22360.4263%22%3E%E9%87%8D%E5%A4%8D%E7%AC%AC%E4%B8%80%E6%AD%A5%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fsvg%3E\" data-testid=\"ne-text-diagram-img\"   style=\"background: white\">\n\n![](https://cdn.jsdelivr.net/gh/Innei/fancy@master/2021/0814123152.gif)\n\n使用 pageproxy 之后，还可以用线上的资源调试线下接口的地址。比如，接口地址挂在 `window.context` 上，通过 pageproxy 的一些处理就可以替换成你想要的接口地址方便去调试本地接口。\n\n再者，如果本地开发服务器 `http` 协议无法调试 `Notification API` 或是 `ServiceWorker`，他们只支持在 `https` 协议上工作，但是使用 pageproxy，我们更容易用线上的地址调试本地的开发资源。\n\n![](https://cdn.jsdelivr.net/gh/Innei/fancy@master/2021/0814122458.png)\n\n![](https://cdn.jsdelivr.net/gh/Innei/fancy@master/2021/0814123259.png)\n\n![](https://cdn.jsdelivr.net/gh/Innei/fancy@master/2021/0814123314.png)\n\nDemo: [pageproxy](https://github.com/Innei/pageproxy)","title":"pageproxy，为 spa 提供初始数据注入","slug":"pageproxy-spa-inject","category_id":"5eb2c62a613a5ab0642f1f7a","summary":null,"images":[{"height":472,"width":1834,"type":"gif","accent":"#707275","src":"https://cdn.jsdelivr.net/gh/Innei/fancy@master/2021/0814123152.gif"},{"height":1760,"width":2272,"type":"png","accent":"#6a7da2","src":"https://cdn.jsdelivr.net/gh/Innei/fancy@master/2021/0814122458.png"},{"height":2102,"width":2624,"type":"png","accent":"#ac6c4c","src":"https://cdn.jsdelivr.net/gh/Innei/fancy@master/2021/0814123259.png"},{"height":2102,"width":2624,"type":"png","accent":"#749890","src":"https://cdn.jsdelivr.net/gh/Innei/fancy@master/2021/0814123314.png"}],"modified":"2021-08-21T03:33:56.393Z","created":"2021-08-14T04:37:29.880Z","meta":null,"category":{"id":"5eb2c62a613a5ab0642f1f7a","type":0,"count":56,"name":"编程","slug":"programming","created":"2020-05-06T14:14:02.339Z"}}],"pagination":{"total":99,"current_page":1,"total_page":10,"size":10,"has_next_page":true,"has_prev_page":false}}
